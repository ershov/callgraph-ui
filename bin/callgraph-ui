#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const electron = require('electron');

// Function to detect if we're running from a packaged app or source tree
function getAppDirectory() {
  const scriptDir = __dirname;

  // First, try the source tree structure (bin/callgraph-ui -> ..)
  const sourceAppDir = path.resolve(scriptDir, '..');
  const sourceMainJs = path.join(sourceAppDir, 'main.js');
  const sourcePackageJson = path.join(sourceAppDir, 'package.json');

  if (fs.existsSync(sourceMainJs) && fs.existsSync(sourcePackageJson)) {
    return sourceAppDir;
  }

  // For packaged apps, we need to find the resources directory
  // Typical packaged structure:
  // - macOS: App.app/Contents/Resources/app.asar.unpacked/ or App.app/Contents/Resources/app/
  // - Windows: resources/app.asar.unpacked/ or resources/app/
  // - Linux: resources/app.asar.unpacked/ or resources/app/

  let currentDir = scriptDir;
  let attempts = 0;
  const maxAttempts = 10; // Prevent infinite loops

  while (attempts < maxAttempts) {
    // Look for main.js in current directory
    const mainJsPath = path.join(currentDir, 'main.js');
    const packageJsonPath = path.join(currentDir, 'package.json');

    if (fs.existsSync(mainJsPath) && fs.existsSync(packageJsonPath)) {
      return currentDir;
    }

    // Look for app or app.asar.unpacked directories
    const appDir = path.join(currentDir, 'app');
    const appAsarUnpackedDir = path.join(currentDir, 'app.asar.unpacked');

    for (const candidateDir of [appDir, appAsarUnpackedDir]) {
      if (fs.existsSync(candidateDir)) {
        const candidateMainJs = path.join(candidateDir, 'main.js');
        const candidatePackageJson = path.join(candidateDir, 'package.json');

        if (fs.existsSync(candidateMainJs) && fs.existsSync(candidatePackageJson)) {
          return candidateDir;
        }
      }
    }

    // Move up one directory level
    const parentDir = path.dirname(currentDir);
    if (parentDir === currentDir) {
      break; // Reached root directory
    }
    currentDir = parentDir;
    attempts++;
  }

  // Fallback: try the original source tree assumption
  return sourceAppDir;
}

// Get the path to the app directory
const appDir = getAppDirectory();

// Parse command line arguments
const args = process.argv.slice(2);

// Handle CLI options
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
  Callgraph-ui - GUI fromntend for callgraph

  Usage:
    callgraph-ui [options]

  Options:
    --home {DIR}    Set the source home directory
    --debug         Show debug information about app paths
    --help, -h      Show this help message
    --version, -v   Show version information
  `);
  process.exit(0);
}

if (args.includes('--debug')) {
  console.log(`Debug information:`);
  console.log(`  Script location: ${__filename}`);
  console.log(`  Script directory: ${__dirname}`);
  console.log(`  Resolved app directory: ${appDir}`);
  console.log(`  Main.js path: ${path.join(appDir, 'main.js')}`);
  console.log(`  Main.js exists: ${fs.existsSync(path.join(appDir, 'main.js'))}`);

  // Remove --debug from args before passing to Electron
  const debugIndex = args.indexOf('--debug');
  args.splice(debugIndex, 1);
}

if (args.includes('--version') || args.includes('-v')) {
  // Read version from package.json
  try {
    const packageJson = JSON.parse(fs.readFileSync(path.join(appDir, 'package.json'), 'utf8'));
    console.log(`callgraph-ui v${packageJson.version}`);
    process.exit(0);
  } catch (error) {
    console.error('Error reading version information:', error.message);
    process.exit(1);
  }
}

if (args.includes('--home')) {
  const homeIndex = args.indexOf('--home');
  if (homeIndex + 1 < args.length) {
    // Set environment variable SRC_HOME for home directory
    process.env.SRC_HOME = args[homeIndex + 1];
    args.splice(homeIndex, 2); // Remove the --home option and its argument
    console.log(`Using source home: ${process.env.SRC_HOME}`);
  } else {
    console.error('Error: --home option requires a directory argument');
    process.exit(1);
  }
}

// Ensure the main.js file exists
const mainJsPath = path.join(appDir, 'main.js');
if (!fs.existsSync(mainJsPath)) {
  console.error(`Error: Could not find main application file at ${mainJsPath}`);
  console.error(`Script directory: ${__dirname}`);
  console.error(`Resolved app directory: ${appDir}`);
  console.error('Available files in app directory:');
  try {
    const files = fs.readdirSync(appDir);
    console.error(files.join(', '));
  } catch (err) {
    console.error('Could not read app directory contents:', err.message);
  }
  process.exit(1);
}

// Launch the Electron app
try {
  const electronProcess = spawn(electron, [appDir, ...args], {
    stdio: 'inherit'
  });

  electronProcess.on('close', (code) => {
    process.exit(code);
  });

  // Handle termination signals
  const handleSignal = (signal) => {
    console.log(`Received ${signal}, terminating...`);
    if (electronProcess.exitCode === null) {
      electronProcess.kill(signal);
    }
  };

  process.on('SIGINT', () => handleSignal('SIGINT'));
  process.on('SIGTERM', () => handleSignal('SIGTERM'));

} catch (error) {
  console.error('Error launching application:', error.message);
  process.exit(1);
}

